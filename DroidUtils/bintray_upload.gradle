version = android.defaultConfig.versionName
group = "klauswk"

def siteUrl = 'https://github.com/Klauswk/DroidUtils'
def gitUrl = 'https://github.com/Klauswk/DroidUtils.git'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = "maven"
        name = project.name
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["GPL-3.0"]
        publish = true
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                artifactId 'DroidUtils'

                name 'An util library for android users'
                url siteUrl

                licenses {
                    license {
                        name 'GNU GENERAL PUBLIC LICENSE, Version 3'
                        url 'http://www.gnu.org/licenses/gpl.txt'
                    }
                }

                developers {
                    developer {
                        id 'klauswk'
                        name 'Klaus Klein'
                        email 'klauswk1@hotmail.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}